var search_data = {
    'index': {
        'searchIndex': ["wrep","wrep\\notificato","wrep\\notificato\\apns","wrep\\notificato\\apns\\feedback","wrep\\notificato\\apns\\certificate","wrep\\notificato\\apns\\certificatefactory","wrep\\notificato\\apns\\feedback\\feedback","wrep\\notificato\\apns\\feedback\\feedbackfactory","wrep\\notificato\\apns\\feedback\\tuple","wrep\\notificato\\apns\\gateway","wrep\\notificato\\apns\\gatewayfactory","wrep\\notificato\\apns\\message","wrep\\notificato\\apns\\messageenvelope","wrep\\notificato\\apns\\messagefactory","wrep\\notificato\\apns\\sender","wrep\\notificato\\apns\\sslsocket","wrep\\notificato\\notificato","wrep\\notificato\\apns\\certificate::__construct","wrep\\notificato\\apns\\certificate::getpemfile","wrep\\notificato\\apns\\certificate::haspassphrase","wrep\\notificato\\apns\\certificate::getpassphrase","wrep\\notificato\\apns\\certificate::getenvironment","wrep\\notificato\\apns\\certificate::getdescription","wrep\\notificato\\apns\\certificate::getvalidfrom","wrep\\notificato\\apns\\certificate::getvalidto","wrep\\notificato\\apns\\certificate::getendpoint","wrep\\notificato\\apns\\certificate::getfingerprint","wrep\\notificato\\apns\\certificatefactory::__construct","wrep\\notificato\\apns\\certificatefactory::setdefaultcertificate","wrep\\notificato\\apns\\certificatefactory::getdefaultcertificate","wrep\\notificato\\apns\\certificatefactory::createcertificate","wrep\\notificato\\apns\\feedback\\feedback::__construct","wrep\\notificato\\apns\\feedback\\feedback::receive","wrep\\notificato\\apns\\feedback\\feedbackfactory::__construct","wrep\\notificato\\apns\\feedback\\feedbackfactory::setcertificatefactory","wrep\\notificato\\apns\\feedback\\feedbackfactory::getcertificatefactory","wrep\\notificato\\apns\\feedback\\feedbackfactory::createfeedback","wrep\\notificato\\apns\\feedback\\tuple::__construct","wrep\\notificato\\apns\\feedback\\tuple::getinvalidatedat","wrep\\notificato\\apns\\feedback\\tuple::getdevicetoken","wrep\\notificato\\apns\\feedback\\tuple::getcertificate","wrep\\notificato\\apns\\gateway::__construct","wrep\\notificato\\apns\\gateway::queue","wrep\\notificato\\apns\\gateway::getqueuelength","wrep\\notificato\\apns\\gateway::flush","wrep\\notificato\\apns\\gatewayfactory::creategateway","wrep\\notificato\\apns\\message::__construct","wrep\\notificato\\apns\\message::getdevicetoken","wrep\\notificato\\apns\\message::getcertificate","wrep\\notificato\\apns\\message::getexpiresat","wrep\\notificato\\apns\\message::setexpiresat","wrep\\notificato\\apns\\message::setalert","wrep\\notificato\\apns\\message::setalertlocalized","wrep\\notificato\\apns\\message::getalert","wrep\\notificato\\apns\\message::setbadge","wrep\\notificato\\apns\\message::clearbadge","wrep\\notificato\\apns\\message::getbadge","wrep\\notificato\\apns\\message::setsound","wrep\\notificato\\apns\\message::getsound","wrep\\notificato\\apns\\message::setcontentavailable","wrep\\notificato\\apns\\message::getcontentavailable","wrep\\notificato\\apns\\message::setpayload","wrep\\notificato\\apns\\message::getpayload","wrep\\notificato\\apns\\message::validatelength","wrep\\notificato\\apns\\message::getjson","wrep\\notificato\\apns\\messageenvelope::__construct","wrep\\notificato\\apns\\messageenvelope::getidentifier","wrep\\notificato\\apns\\messageenvelope::getmessage","wrep\\notificato\\apns\\messageenvelope::getretrylimit","wrep\\notificato\\apns\\messageenvelope::getretryenvelope","wrep\\notificato\\apns\\messageenvelope::setstatus","wrep\\notificato\\apns\\messageenvelope::getstatus","wrep\\notificato\\apns\\messageenvelope::getstatusdescription","wrep\\notificato\\apns\\messageenvelope::getfinalstatus","wrep\\notificato\\apns\\messageenvelope::getfinalstatusdescription","wrep\\notificato\\apns\\messageenvelope::getbinarymessage","wrep\\notificato\\apns\\messagefactory::__construct","wrep\\notificato\\apns\\messagefactory::setcertificatefactory","wrep\\notificato\\apns\\messagefactory::getcertificatefactory","wrep\\notificato\\apns\\messagefactory::createmessage","wrep\\notificato\\apns\\sender::__construct","wrep\\notificato\\apns\\sender::setgatewayfactory","wrep\\notificato\\apns\\sender::getgatewayfactory","wrep\\notificato\\apns\\sender::setlogger","wrep\\notificato\\apns\\sender::send","wrep\\notificato\\apns\\sender::queue","wrep\\notificato\\apns\\sender::getqueuelength","wrep\\notificato\\apns\\sender::flush","wrep\\notificato\\apns\\sslsocket::__construct","wrep\\notificato\\apns\\sslsocket::setlogger","wrep\\notificato\\apns\\sslsocket::getcertificate","wrep\\notificato\\notificato::__construct","wrep\\notificato\\notificato::createcertificate","wrep\\notificato\\notificato::createmessage","wrep\\notificato\\notificato::queue","wrep\\notificato\\notificato::flush","wrep\\notificato\\notificato::send","wrep\\notificato\\notificato::receivefeedback","wrep\\notificato\\notificato::setsender","wrep\\notificato\\notificato::setlogger","wrep\\notificato\\notificato::setcertificatefactory","wrep\\notificato\\notificato::setfeedbackfactory","wrep\\notificato\\notificato::setmessagefactory"],
        'info': [["Wrep","","Wrep.html","","",3],["Wrep\\Notificato","","Wrep\/Notificato.html","","",3],["Wrep\\Notificato\\Apns","","Wrep\/Notificato\/Apns.html","","",3],["Wrep\\Notificato\\Apns\\Feedback","","Wrep\/Notificato\/Apns\/Feedback.html","","",3],["Certificate","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/Certificate.html","","",1],["CertificateFactory","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/CertificateFactory.html","","",1],["Feedback","Wrep\\Notificato\\Apns\\Feedback","Wrep\/Notificato\/Apns\/Feedback\/Feedback.html"," < SslSocket","",1],["FeedbackFactory","Wrep\\Notificato\\Apns\\Feedback","Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html","","",1],["Tuple","Wrep\\Notificato\\Apns\\Feedback","Wrep\/Notificato\/Apns\/Feedback\/Tuple.html","","",1],["Gateway","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/Gateway.html"," < SslSocket","",1],["GatewayFactory","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/GatewayFactory.html","","",1],["Message","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/Message.html","","An APNS Message representation.",1],["MessageEnvelope","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/MessageEnvelope.html","","",1],["MessageFactory","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/MessageFactory.html","","",1],["Sender","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/Sender.html","","",1],["SslSocket","Wrep\\Notificato\\Apns","Wrep\/Notificato\/Apns\/SslSocket.html","","",1],["Notificato","Wrep\\Notificato","Wrep\/Notificato\/Notificato.html","","",1],["Certificate::__construct","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method___construct","(string $pemFile, string|null $passphrase = null, boolean $validate = true, string|null $endpointEnv = null)","APNS Certificate constructor",2],["Certificate::getPemFile","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getPemFile","()","Get the path to the PEM file",2],["Certificate::hasPassphrase","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_hasPassphrase","()","Checks if there is a passphrase to use with the certificate",2],["Certificate::getPassphrase","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getPassphrase","()","Passphrase to use with the PEM file",2],["Certificate::getEnvironment","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getEnvironment","()","Get the APNS environment this certificate is associated",2],["Certificate::getDescription","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getDescription","()","An as humanreadable as possible description of the",2],["Certificate::getValidFrom","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getValidFrom","()","Get moment this certificate will become valid  Note:",2],["Certificate::getValidTo","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getValidTo","()","Get moment this certificate will expire  Note: Will",2],["Certificate::getEndpoint","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getEndpoint","(string $endpointType)","Get the endpoint this certificate is valid for",2],["Certificate::getFingerprint","Wrep\\Notificato\\Apns\\Certificate","Wrep\/Notificato\/Apns\/Certificate.html#method_getFingerprint","()","Get a unique hash of the certificate  this can be used",2],["CertificateFactory::__construct","Wrep\\Notificato\\Apns\\CertificateFactory","Wrep\/Notificato\/Apns\/CertificateFactory.html#method___construct","(string|null $pemFile = null, string|null $passphrase = null, boolean $validate = true, string|null $endpointEnv = null)","Create the CertificateFactory",2],["CertificateFactory::setDefaultCertificate","Wrep\\Notificato\\Apns\\CertificateFactory","Wrep\/Notificato\/Apns\/CertificateFactory.html#method_setDefaultCertificate","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $defaultCertificate = null)","Set the default certificate",2],["CertificateFactory::getDefaultCertificate","Wrep\\Notificato\\Apns\\CertificateFactory","Wrep\/Notificato\/Apns\/CertificateFactory.html#method_getDefaultCertificate","()","Get the current default certificate",2],["CertificateFactory::createCertificate","Wrep\\Notificato\\Apns\\CertificateFactory","Wrep\/Notificato\/Apns\/CertificateFactory.html#method_createCertificate","(string $pemFile, string|null $passphrase = null, boolean $validate = true, string|null $endpointEnv = null)","Create a Certificate",2],["Feedback::__construct","Wrep\\Notificato\\Apns\\Feedback\\Feedback","Wrep\/Notificato\/Apns\/Feedback\/Feedback.html#method___construct","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Construct Connection",2],["Feedback::receive","Wrep\\Notificato\\Apns\\Feedback\\Feedback","Wrep\/Notificato\/Apns\/Feedback\/Feedback.html#method_receive","()","Receive the feedback tuples from APNS",2],["FeedbackFactory::__construct","Wrep\\Notificato\\Apns\\Feedback\\FeedbackFactory","Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html#method___construct","(<a href=\"Wrep\/Notificato\/Apns\/CertificateFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\CertificateFactory\">CertificateFactory<\/abbr><\/a> $certificateFactory = null)","Create the FeedbackFactory",2],["FeedbackFactory::setCertificateFactory","Wrep\\Notificato\\Apns\\Feedback\\FeedbackFactory","Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html#method_setCertificateFactory","(<a href=\"Wrep\/Notificato\/Apns\/CertificateFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\CertificateFactory\">CertificateFactory<\/abbr><\/a> $certificateFactory = null)","Set a certificate factory to fetch the default certificate",2],["FeedbackFactory::getCertificateFactory","Wrep\\Notificato\\Apns\\Feedback\\FeedbackFactory","Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html#method_getCertificateFactory","()","Get the current certificate factory",2],["FeedbackFactory::createFeedback","Wrep\\Notificato\\Apns\\Feedback\\FeedbackFactory","Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html#method_createFeedback","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Create a Feedback object",2],["Tuple::__construct","Wrep\\Notificato\\Apns\\Feedback\\Tuple","Wrep\/Notificato\/Apns\/Feedback\/Tuple.html#method___construct","(int $invalidatedAtTimestamp, string $deviceToken, <a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Construct Tuple",2],["Tuple::getInvalidatedAt","Wrep\\Notificato\\Apns\\Feedback\\Tuple","Wrep\/Notificato\/Apns\/Feedback\/Tuple.html#method_getInvalidatedAt","()","Moment the device unregistered.",2],["Tuple::getDeviceToken","Wrep\\Notificato\\Apns\\Feedback\\Tuple","Wrep\/Notificato\/Apns\/Feedback\/Tuple.html#method_getDeviceToken","()","Get the device token of the device that unregistered",2],["Tuple::getCertificate","Wrep\\Notificato\\Apns\\Feedback\\Tuple","Wrep\/Notificato\/Apns\/Feedback\/Tuple.html#method_getCertificate","()","Get the certificate used while receiving this tuple",2],["Gateway::__construct","Wrep\\Notificato\\Apns\\Gateway","Wrep\/Notificato\/Apns\/Gateway.html#method___construct","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Construct Connection",2],["Gateway::queue","Wrep\\Notificato\\Apns\\Gateway","Wrep\/Notificato\/Apns\/Gateway.html#method_queue","(<a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message, int $retryLimit = MessageEnvelope::DEFAULT_RETRY_LIMIT)","Queue a message for sending",2],["Gateway::getQueueLength","Wrep\\Notificato\\Apns\\Gateway","Wrep\/Notificato\/Apns\/Gateway.html#method_getQueueLength","()","Count of all queued messages",2],["Gateway::flush","Wrep\\Notificato\\Apns\\Gateway","Wrep\/Notificato\/Apns\/Gateway.html#method_flush","()","Send all queued messages",2],["GatewayFactory::createGateway","Wrep\\Notificato\\Apns\\GatewayFactory","Wrep\/Notificato\/Apns\/GatewayFactory.html#method_createGateway","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Create a Gateway object",2],["Message::__construct","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method___construct","(string $deviceToken, <a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Construct Message",2],["Message::getDeviceToken","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getDeviceToken","()","Get the device token of the receiving device",2],["Message::getCertificate","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getCertificate","()","Get the certificate that should be used for this message",2],["Message::getExpiresAt","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getExpiresAt","()","Get the moment this message expires",2],["Message::setExpiresAt","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setExpiresAt","(<abbr title=\"Wrep\\Notificato\\Apns\\DateTime\">DateTime<\/abbr> $expiresAt = null)","Set the moment this message should expire or null if",2],["Message::setAlert","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setAlert","(string|null $body, string|null $actionLocKey = null, string|null $launchImage = null)","Set the alert to display.",2],["Message::setAlertLocalized","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setAlertLocalized","(string $locKey, array $locArgs = array(), string|null $actionLocKey = null, string|null $launchImage = null)","Set the localized alert to display.",2],["Message::getAlert","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getAlert","()","Get the current alert",2],["Message::setBadge","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setBadge","(int|null $badge)","Set the badge to display on the App icon",2],["Message::clearBadge","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_clearBadge","()","Clear the badge from the App icon",2],["Message::getBadge","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getBadge","()","Get the value of the badge as set in this message",2],["Message::setSound","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setSound","(string $sound = &#039;default&#039;)","Set the sound that will be played when this message",2],["Message::getSound","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getSound","()","Get the sound that will be played when this message",2],["Message::setContentAvailable","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setContentAvailable","(boolean $contentAvailable)","Set newsstand content availability flag that will trigger",2],["Message::getContentAvailable","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getContentAvailable","()","Get newsstand content availability flag that will trigger",2],["Message::setPayload","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_setPayload","(array|<abbr title=\"Wrep\\Notificato\\Apns\\json\">json<\/abbr>|null $payload)","Set custom payload to go with the message",2],["Message::getPayload","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getPayload","()","Get the current payload",2],["Message::validateLength","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_validateLength","()","Checks if the length of the message is acceptable for",2],["Message::getJson","Wrep\\Notificato\\Apns\\Message","Wrep\/Notificato\/Apns\/Message.html#method_getJson","()","Get the JSON payload that should be send to the APNS",2],["MessageEnvelope::__construct","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method___construct","(int $identifier, <a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message, int $retryLimit = MessageEnvelope::DEFAULT_RETRY_LIMIT)","Construct MessageEnvelope",2],["MessageEnvelope::getIdentifier","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getIdentifier","()","Unique number to the relevant APNS connection to identify",2],["MessageEnvelope::getMessage","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getMessage","()","The message that's is contained by this envelope",2],["MessageEnvelope::getRetryLimit","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getRetryLimit","()","The number of times sending should be retried if it",2],["MessageEnvelope::getRetryEnvelope","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getRetryEnvelope","()","Get the envelope used for the retry",2],["MessageEnvelope::setStatus","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_setStatus","(int $status, <a href=\"Wrep\/Notificato\/Apns\/MessageEnvelope.html\"><abbr title=\"Wrep\\Notificato\\Apns\\MessageEnvelope\">MessageEnvelope<\/abbr><\/a>|null $envelope = null)","Set the status of this message envelope  only possible",2],["MessageEnvelope::getStatus","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getStatus","()","Get the current status of this message envelope",2],["MessageEnvelope::getStatusDescription","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getStatusDescription","()","Get a description of the current status of this message",2],["MessageEnvelope::getFinalStatus","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getFinalStatus","()","Get the final status after all retries.",2],["MessageEnvelope::getFinalStatusDescription","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getFinalStatusDescription","()","Get a description of the final status after all retries.",2],["MessageEnvelope::getBinaryMessage","Wrep\\Notificato\\Apns\\MessageEnvelope","Wrep\/Notificato\/Apns\/MessageEnvelope.html#method_getBinaryMessage","()","Get the message that this envelope contains in binary",2],["MessageFactory::__construct","Wrep\\Notificato\\Apns\\MessageFactory","Wrep\/Notificato\/Apns\/MessageFactory.html#method___construct","(<a href=\"Wrep\/Notificato\/Apns\/CertificateFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\CertificateFactory\">CertificateFactory<\/abbr><\/a> $certificateFactory = null)","Create the MessageFactory",2],["MessageFactory::setCertificateFactory","Wrep\\Notificato\\Apns\\MessageFactory","Wrep\/Notificato\/Apns\/MessageFactory.html#method_setCertificateFactory","(<a href=\"Wrep\/Notificato\/Apns\/CertificateFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\CertificateFactory\">CertificateFactory<\/abbr><\/a> $certificateFactory = null)","Set a certificate factory to fetch the default certificate",2],["MessageFactory::getCertificateFactory","Wrep\\Notificato\\Apns\\MessageFactory","Wrep\/Notificato\/Apns\/MessageFactory.html#method_getCertificateFactory","()","Get the current certificate factory",2],["MessageFactory::createMessage","Wrep\\Notificato\\Apns\\MessageFactory","Wrep\/Notificato\/Apns\/MessageFactory.html#method_createMessage","(string $deviceToken, <a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Create a Message",2],["Sender::__construct","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method___construct","()","Construct Sender",2],["Sender::setGatewayFactory","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_setGatewayFactory","(<a href=\"Wrep\/Notificato\/Apns\/GatewayFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\GatewayFactory\">GatewayFactory<\/abbr><\/a> $gatewayFactory)","Set the gateway factory to use for creating connections",2],["Sender::getGatewayFactory","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_getGatewayFactory","()","Get the current gateway factory",2],["Sender::setLogger","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_setLogger","(<abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger)","Sets a logger instance on the object",2],["Sender::send","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_send","(<a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message)","Queues a message and flushes the gateway connection",2],["Sender::queue","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_queue","(<a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message, int $retryLimit = MessageEnvelope::DEFAULT_RETRY_LIMIT)","Queue a message on the correct APNS gateway connection",2],["Sender::getQueueLength","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_getQueueLength","()","Count of all queued messages",2],["Sender::flush","Wrep\\Notificato\\Apns\\Sender","Wrep\/Notificato\/Apns\/Sender.html#method_flush","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Send all queued messages",2],["SslSocket::__construct","Wrep\\Notificato\\Apns\\SslSocket","Wrep\/Notificato\/Apns\/SslSocket.html#method___construct","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate)","Construct Connection",2],["SslSocket::setLogger","Wrep\\Notificato\\Apns\\SslSocket","Wrep\/Notificato\/Apns\/SslSocket.html#method_setLogger","(<abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger)","Sets a logger instance on the object",2],["SslSocket::getCertificate","Wrep\\Notificato\\Apns\\SslSocket","Wrep\/Notificato\/Apns\/SslSocket.html#method_getCertificate","()","Get the certificate used with this connection",2],["Notificato::__construct","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method___construct","(string|null $pemFile = null, string|null $passphrase = null, boolean $validate = true, string|null $endpointEnv = null)","Notificato constructor",2],["Notificato::createCertificate","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_createCertificate","(string $pemFile, string|null $passphrase = null, boolean $validate = true, string|null $endpointEnv = null)","Create an APNS Certificate",2],["Notificato::createMessage","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_createMessage","(string $deviceToken, <a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Create a Message",2],["Notificato::queue","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_queue","(<a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message, int $retryLimit = Apns\\MessageEnvelope::DEFAULT_RETRY_LIMIT)","Queue a message on the correct APNS gateway connection",2],["Notificato::flush","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_flush","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Send all queued messages",2],["Notificato::send","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_send","(<a href=\"Wrep\/Notificato\/Apns\/Message.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Message\">Message<\/abbr><\/a> $message)","Queues a message and flushes the gateway connection",2],["Notificato::receiveFeedback","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_receiveFeedback","(<a href=\"Wrep\/Notificato\/Apns\/Certificate.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Certificate\">Certificate<\/abbr><\/a> $certificate = null)","Receive the feedback tuples from APNS",2],["Notificato::setSender","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_setSender","(<a href=\"Wrep\/Notificato\/Apns\/Sender.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Sender\">Sender<\/abbr><\/a> $sender)","Sets the sender to use",2],["Notificato::setLogger","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_setLogger","(<abbr title=\"Psr\\Log\\LoggerInterface\">LoggerInterface<\/abbr> $logger)","Sets a logger instance on the object",2],["Notificato::setCertificateFactory","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_setCertificateFactory","(<a href=\"Wrep\/Notificato\/Apns\/CertificateFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\CertificateFactory\">CertificateFactory<\/abbr><\/a> $certificateFactory)","Sets the certificate factory to use",2],["Notificato::setFeedbackFactory","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_setFeedbackFactory","(<a href=\"Wrep\/Notificato\/Apns\/Feedback\/FeedbackFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\Feedback\\FeedbackFactory\">FeedbackFactory<\/abbr><\/a> $feedbackFactory)","Sets the feedback factory to use",2],["Notificato::setMessageFactory","Wrep\\Notificato\\Notificato","Wrep\/Notificato\/Notificato.html#method_setMessageFactory","(<a href=\"Wrep\/Notificato\/Apns\/MessageFactory.html\"><abbr title=\"Wrep\\Notificato\\Apns\\MessageFactory\">MessageFactory<\/abbr><\/a> $messageFactory)","Sets the message factory to use",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']